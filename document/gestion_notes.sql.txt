DROP DATABASE IF EXISTS gestion_notes;
CREATE DATABASE gestion_notes;
\c gestion_notes;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET search_path = public;
SET row_security = off;

CREATE TABLE affectation_professeur (
    id SERIAL PRIMARY KEY,
    professeur_id INTEGER REFERENCES professeur(id),
    matiere_id INTEGER REFERENCES matiere(id),
    classe_id INTEGER REFERENCES classe(id),
    trimestre INTEGER CHECK (trimestre BETWEEN 1 AND 3)
);

CREATE TABLE appreciation (
    id SERIAL PRIMARY KEY,
    eleve_id INTEGER REFERENCES eleve(id),
    matiere_id INTEGER REFERENCES matiere(id),
    trimestre INTEGER CHECK (trimestre BETWEEN 1 AND 3),
    contenu TEXT
);

CREATE TABLE classe (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(50) NOT NULL,
    niveau_id INTEGER REFERENCES niveau(id)
);

CREATE TABLE eleve (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(100) NOT NULL,
    prenom VARCHAR(100) NOT NULL,
    classe_id INTEGER REFERENCES classe(id)
);

CREATE TABLE matiere (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(100) NOT NULL,
    description TEXT
);

CREATE TABLE niveau (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(50) NOT NULL
);

CREATE TABLE note (
    id SERIAL PRIMARY KEY,
    eleve_id INTEGER REFERENCES eleve(id),
    matiere_id INTEGER REFERENCES matiere(id),
    trimestre INTEGER CHECK (trimestre BETWEEN 1 AND 3),
    coefficient DOUBLE PRECISION,
    valeur DOUBLE PRECISION CHECK (valeur BETWEEN 0 AND 20),
    type_note VARCHAR(10) CHECK (type_note IN ('IND', 'GROUPE'))
);

CREATE TABLE parent (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(100) NOT NULL,
    prenom VARCHAR(100) NOT NULL,
    email VARCHAR(150) NOT NULL
);

CREATE TABLE parent_eleve (
    parent_id INTEGER REFERENCES parent(id) ON DELETE CASCADE,
    eleve_id INTEGER REFERENCES eleve(id) ON DELETE CASCADE,
    PRIMARY KEY (parent_id, eleve_id)
);

CREATE TABLE professeur (
    id SERIAL PRIMARY KEY,
    nom VARCHAR(100) NOT NULL,
    prenom VARCHAR(100) NOT NULL
);
